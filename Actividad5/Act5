package com.mycompany.proyectofinalpoo;

import java.util.*;
import java.util.Scanner;

/**
 * Clase base para representar a un usuario en el sistema.
 * Contiene información básica como nombre y correo electrónico.
 */
class Usuario {
    protected String nombre;
    protected String correo;

    /**
     * Constructor para crear un nuevo usuario.
     * @param nombre Nombre del usuario.
     * @param correo Correo electrónico del usuario.
     */
    public Usuario(String nombre, String correo) {
        this.nombre = nombre;
        this.correo = correo;
    }

    /**
     * Obtiene el nombre del usuario.
     * @return El nombre del usuario.
     */
    public String getNombre() { return nombre; }

    /**
     * Obtiene el correo electrónico del usuario.
     * @return El correo electrónico del usuario.
     */
    public String getCorreo() { return correo; }

    /**
     * Representación en cadena del objeto Usuario.
     * @return Una cadena con el nombre y el correo del usuario.
     */
    @Override
    public String toString() {
        return "Nombre: " + nombre + ", Correo: " + correo;
    }
}

/**
 * Interfaz que define las operaciones para administrar un equipo,
 * como agregar o quitar alumnos.
 */
interface AdministrableEquipo {
    /**
     * Agrega un alumno a un equipo con un rol específico.
     * @param equipo El equipo al que se agregará el alumno.
     * @param alumno El alumno a agregar.
     * @param rol El rol del alumno en el equipo.
     */
    void agregarAlumnoAEquipo(Equipo equipo, Alumno alumno, String rol);

    /**
     * Quita un alumno de un equipo dado su ID.
     * @param equipo El equipo del que se quitará el alumno.
     * @param idAlumno El ID del alumno a quitar.
     */
    void quitarAlumnoDeEquipo(Equipo equipo, int idAlumno);
}

/**
 * Clase que representa a un profesor, que hereda de la clase Usuario
 * e implementa la interfaz AdministrableEquipo.
 */
class Profesor extends Usuario implements AdministrableEquipo{

    /**
     * Constructor para crear un nuevo profesor.
     * @param nombre Nombre del profesor.
     * @param correo Correo electrónico del profesor.
     */
    public Profesor(String nombre, String correo) {
        super(nombre, correo);
    }

    /**
     * Implementación del método para agregar un alumno a un equipo.
     * @param equipo El equipo al que se agregará el alumno.
     * @param alumno El alumno a agregar.
     * @param rol El rol del alumno en el equipo.
     */
    @Override
    public void agregarAlumnoAEquipo(Equipo equipo, Alumno alumno, String rol) {
        equipo.agregarMiembro(alumno, rol);
        System.out.println(alumno.getNombre() + " ha sido agregado al equipo " + equipo.getNombre() + " como " + rol);
    }

    /**
     * Implementación del método para quitar un alumno de un equipo.
     * @param equipo El equipo del que se quitará el alumno.
     * @param idAlumno El ID del alumno a quitar.
     */
    @Override
    public void quitarAlumnoDeEquipo(Equipo equipo, int idAlumno) {
        if (equipo.quitarMiembro(idAlumno)) {
            System.out.println("Alumno con ID " + idAlumno + " ha sido eliminado del equipo " + equipo.getNombre());
        } else {
            System.out.println("No se encontró un alumno con el ID " + idAlumno);
        }
    }
}

/**
 * Clase que representa a un alumno, que hereda de la clase Usuario.
 */
class Alumno extends Usuario {
    private int id;

    /**
     * Constructor para crear un nuevo alumno.
     * @param nombre Nombre del alumno.
     * @param correo Correo electrónico del alumno.
     * @param id ID único del alumno.
     */
    public Alumno(String nombre, String correo, int id) {
        super(nombre, correo);
        this.id = id;
    }

    /**
     * Obtiene el ID del alumno.
     * @return El ID del alumno.
     */
    public int getId() { return id; }

    /**
     * Representación en cadena del objeto Alumno.
     * @return Una cadena con el nombre, correo y ID del alumno.
     */
    @Override
    public String toString() {
        return super.toString() + ", ID: " + id;
    }
}

/**
 * Clase que representa a un equipo de trabajo.
 * Contiene información como el nombre del equipo y sus miembros.
 */
class Equipo {
    private String nombre;
    private Map<Integer, Alumno> miembros; // Mapa para almacenar los miembros del equipo (ID -> Alumno)
    private Map<Integer, String> roles;   // Mapa para almacenar los roles de cada miembro (ID -> Rol)
    private int siguienteId = 1; // Esto parece no ser usado en la clase

    /**
     * Constructor para crear un nuevo equipo.
     * @param nombre Nombre del equipo.
     */
    public Equipo(String nombre) {
        this.nombre = nombre;
        this.miembros = new HashMap<>();
        this.roles = new HashMap<>();
    }

    /**
     * Obtiene el nombre del equipo.
     * @return El nombre del equipo.
     */
    public String getNombre() { return nombre; }

    /**
     * Agrega un miembro al equipo.
     * @param alumno El alumno a agregar al equipo.
     * @param rol El rol del alumno en el equipo.
     */
    public void agregarMiembro(Alumno alumno, String rol) {
        miembros.put(alumno.getId(), alumno);
        roles.put(alumno.getId(), rol);
    }

    /**
     * Obtiene el siguiente ID disponible.
     * @return El siguiente ID disponible.
     */
    public int obtenerSiguienteId() {
        return siguienteId++;
    }

    /**
     * Quita un miembro del equipo dado su ID.
     * @param idAlumno El ID del alumno a quitar.
     * @return true si el alumno fue encontrado y eliminado, false en caso contrario.
     */
    public boolean quitarMiembro(int idAlumno) {
        if (miembros.containsKey(idAlumno)) {
            miembros.remove(idAlumno);
            roles.remove(idAlumno);
            return true;
        }
        return false;
    }

    /**
     * Muestra la lista de miembros del equipo.
     */
    public void mostrarMiembros() {
        System.out.println("Equipo " + nombre + " - Miembros:");
        if(miembros.isEmpty()){
            System.out.println("El equipo esta vacio");
            return;
        }
        for (Map.Entry<Integer, Alumno> entry : miembros.entrySet()) {
            System.out.println("ID: " + entry.getKey() + " - " + entry.getValue().getNombre() + " (" + roles.get(entry.getKey()) + ")");
        }
    }
}

/**
 * Clase abstracta para la gestión de usuarios (registro e inicio de sesión).
 */
class UsuarioManager {
    protected Map<String, String> usuarios = new HashMap<>(); // Almacena los usuarios (nombre de usuario -> contraseña)
    protected Scanner sc = new Scanner(System.in);         // Scanner para leer la entrada del usuario
    protected List<Usuario> registrados = new ArrayList<>(); // Lista para almacenar los usuarios registrados

    /**
     * Registra un nuevo usuario en el sistema.
     * @param nombre Nombre del usuario.
     * @param correo Correo electrónico del usuario.
     * @param username Nombre de usuario para iniciar sesión.
     * @param password Contraseña del usuario.
     * @param tipoUsuario Tipo de usuario (Profesor o Alumno).
     */
    public void registrarUsuario(String nombre, String correo, String username, String password, String tipoUsuario){
        if (usuarios.containsKey(username)) {
            System.out.println("Error: El nombre de usuario ya está registrado.");
            return;
        }
        usuarios.put(username, password);
        if("Profesor".equalsIgnoreCase(tipoUsuario)){
            registrados.add(new Profesor(nombre,correo));
            System.out.println("profesor creado exitosamente!");

        } else if ("Alumno".equalsIgnoreCase(tipoUsuario)) {

            System.out.println("Error : Aun no es posible crear Alumnos desde registrar");
        }
    }

    /**
     * Inicia sesión de un usuario en el sistema.
     * @param nombreUsuario Nombre de usuario del usuario.
     * @param contrasena Contraseña del usuario.
     * @return true si el inicio de sesión fue exitoso, false en caso contrario.
     */
    public boolean iniciarSesion(String nombreUsuario, String contrasena) {
        if (!usuarios.containsKey(nombreUsuario)) {
            System.out.println("Error: Nombre de usuario no encontrado.");
            return false;
        }

        if (!usuarios.get(nombreUsuario).equals(contrasena)) {
            System.out.println("Error: Contraseña incorrecta.");
            return false;
        }

        System.out.println("Inicio de sesión exitoso. Bienvenido, " + nombreUsuario + "!");
        return true;
    }

    /**
     * Lista los usuarios registrados en el sistema.
     */
    public void listarUsuarios(){
        System.out.println("Usuarios Registrados:");
        for (Usuario usuario : registrados) {
            System.out.println(usuario);
        }
    }
}

/**
 * Clase que extiende UsuarioManager y se encarga de la interacción con la consola
 * para el registro de usuarios.
 */
class ConsolaUserManager extends UsuarioManager{

    /**
     * Registra un nuevo usuario a través de la consola.
     */
    public void registrar() {
        System.out.print("Nombre de usuario: ");
        String nombreUsuario = sc.nextLine();
        if (usuarios.containsKey(nombreUsuario)) {
            System.out.println("Error: El nombre de usuario ya está registrado.");
            return;
        }

        System.out.print("Contraseña: ");
        String contrasena = sc.nextLine();
        System.out.print("Nombre: ");
        String nombre = sc.nextLine();
        System.out.print("Correo electrónico: ");
        String correo = sc.nextLine();

        super.registrarUsuario(nombre,correo,nombreUsuario,contrasena,"profesor");

        System.out.println("Registro exitoso.");
    }
}

/**
 * Clase que representa un proyecto.
 * Contiene información como el nombre del proyecto, los equipos que participan
 * y las tareas asignadas.
 */
class Proyecto {
    private String nombre;
    private List<Equipo> equipos;
    private List<Tarea> tareas;

    /**
     * Constructor para crear un nuevo proyecto.
     * @param nombre Nombre del proyecto.
     */
    public Proyecto(String nombre) {
        this.nombre = nombre;
        this.equipos = new ArrayList<>();
        this.tareas = new ArrayList<>();
    }

    /**
     * Obtiene el nombre del proyecto.
     * @return El nombre del proyecto.
     */
    public String getNombre() { return nombre; }

    /**
     * Obtiene la lista de equipos del proyecto.
     * @return La lista de equipos del proyecto.
     */
    public List<Equipo> getEquipos() { return equipos; }

    /**
     * Agrega un equipo al proyecto.
     * @param equipo El equipo a agregar.
     */
    public void agregarEquipo(Equipo equipo) {
        equipos.add(equipo);
    }

    /**
     * Agrega una tarea al proyecto.
     * @param tarea La tarea a agregar.
     */
    public void agregarTarea(Tarea tarea) {
        tareas.add(tarea);
    }

    /**
     * Muestra la lista de equipos del proyecto.
     */
    public void mostrarEquipos() {
        System.out.println("Equipos en el proyecto " + nombre + ":");
        if(equipos.isEmpty()){
            System.out.println("No hay equipos aun");
        }
        for (Equipo e : equipos) {
            e.mostrarMiembros();
        }
    }
}

/**
 * Clase que representa una tarea.
 * Contiene información como la descripción de la tarea y el alumno asignado.
 */
class Tarea {
    private String descripcion;
    private Alumno asignado;

    /**
     * Constructor para crear una nueva tarea.
     * @param descripcion Descripción de la tarea.
     * @param asignado Alumno asignado a la tarea.
     */
    public Tarea(String descripcion, Alumno asignado) {
        this.descripcion = descripcion;
        this.asignado = asignado;
    }

    /**
     * Muestra la información de la tarea.
     */
    public void mostrarTarea() {
        System.out.println("Tarea: " + descripcion + " asignada a " + asignado.getNombre());
    }
}

/**
 * Clase principal del programa.
 * Contiene el método main, que es el punto de entrada del programa.
 */
public class ProyectofinalPOO {
    /**
     * Método principal del programa.
     * @param args Argumentos de la línea de comandos.
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ConsolaUserManager userManager = new ConsolaUserManager();
        List<Proyecto> proyectos = new ArrayList<>();
        List<Alumno> alumnos = new ArrayList<>(); // Lista para almacenar alumnos

        // Bucle principal del programa
        while (true) {
            System.out.println("\n1. Crear Proyecto\n2. Administrar Equipos\n3. Asignar Tareas\n4. Mostrar Proyectos\n5. Registrar Alumno\n6. Salir");
            System.out.print("Elige una opción: ");
            String choice = sc.nextLine();

            // Selección de opción
            switch (choice) {
                case "1": {
                    // Crear Proyecto
                    System.out.print("Nombre del proyecto: ");
                    String nombreProyecto = sc.nextLine();
                    proyectos.add(new Proyecto(nombreProyecto));
                    System.out.println("Proyecto creado exitosamente.");
                    break;
                }
                case "2": {
                    // Administrar Equipos
                    if (proyectos.isEmpty()) {
                        System.out.println("No hay proyectos creados aún. Crea un proyecto primero.");
                        break;
                    }

                    System.out.println("Seleccione el proyecto para administrar equipos:");
                    for (int i = 0; i < proyectos.size(); i++) {
                        System.out.println((i + 1) + ". " + proyectos.get(i).getNombre());
                    }
                    System.out.print("Ingrese el número del proyecto: ");
                    try {
                        int proyectoIndex = Integer.parseInt(sc.nextLine()) - 1;
                        if (proyectoIndex >= 0 && proyectoIndex < proyectos.size()) {
                            Proyecto proyectoSeleccionado = proyectos.get(proyectoIndex);
                            administrarEquipos(proyectoSeleccionado, alumnos, sc); // Pasa la lista de alumnos
                        } else {
                            System.out.println("Número de proyecto inválido.");
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Entrada inválida. Ingrese un número.");
                    }
                    break;
                }
                case "3": {
                    // Asignar Tareas
                    if (proyectos.isEmpty() || alumnos.isEmpty()) {
                        System.out.println("No hay proyectos o alumnos registrados.");
                        break;
                    }

                    System.out.println("Seleccione el proyecto:");
                    for (int i = 0; i < proyectos.size(); i++) {
                        System.out.println((i + 1) + ". " + proyectos.get(i).getNombre());
                    }
                    System.out.print("Ingrese el número del proyecto: ");
                    try {
                        int proyectoIndex = Integer.parseInt(sc.nextLine()) - 1;
                        if (proyectoIndex >= 0 && proyectoIndex < proyectos.size()) {
                            Proyecto proyectoSeleccionado = proyectos.get(proyectoIndex);
                            asignarTareas(proyectoSeleccionado, alumnos, sc);
                        } else {
                            System.out.println("Número de proyecto inválido.");
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Entrada inválida. Ingrese un número.");
                    }
                    break;
                }
                case "4": {
                    // Mostrar Proyectos
                    if (proyectos.isEmpty()) {
                        System.out.println("No hay proyectos creados aún.");
                    } else {
                        for (Proyecto p : proyectos) {
                            System.out.println("Proyecto: " + p.getNombre());
                            p.mostrarEquipos();
                        }
                    }
                    break;
                }
                case "5":{
                    // Registrar Alumno
                    System.out.print("Nombre del alumno: ");
                    String nombreAlumno = sc.nextLine();
                    System.out.print("Correo electrónico del alumno: ");
                    String correoAlumno = sc.nextLine();
                    System.out.print("ID del alumno: ");
                    try {
                        int idAlumno = Integer.parseInt(sc.nextLine());
                        alumnos.add(new Alumno(nombreAlumno, correoAlumno, idAlumno));
                        System.out.println("Alumno registrado exitosamente.");
                    } catch (NumberFormatException e) {
                        System.out.println("ID inválido. Debe ser un número entero.");
                    }
                    break;
                }
                case "6": {
                    // Salir
                    System.out.println("Saliendo del programa.");
                    sc.close();
                    return;
                }
                default:
                    System.out.println("Opción no válida.");
            }
        }
    }

    /**
     * Método para administrar equipos dentro de un proyecto seleccionado.
     * Permite crear, agregar/quitar alumnos y mostrar los equipos del proyecto.
     * @param proyecto Proyecto al cual se administrarán los equipos.
     * @param alumnos Lista de alumnos disponibles para agregar a los equipos.
     * @param sc Scanner para la entrada del usuario.
     */
    public static void administrarEquipos(Proyecto proyecto, List<Alumno> alumnos, Scanner sc) {
        // Bucle para la administración de equipos
        while (true) {
            System.out.println("\nAdministración de Equipos para el proyecto " + proyecto.getNombre());
            System.out.println("1. Crear Equipo\n2. Agregar Alumno a Equipo\n3. Quitar Alumno de Equipo\n4. Mostrar Equipos\n5. Volver al menú principal");
            System.out.print("Elige una opción: ");
            String choice = sc.nextLine();

            // Selección de opción dentro de la administración de equipos
            switch (choice) {
                case "1": {
                    // Crear Equipo
                    System.out.print("Nombre del equipo: ");
                    String nombreEquipo = sc.nextLine();
                    Equipo nuevoEquipo = new Equipo(nombreEquipo);
                    proyecto.agregarEquipo(nuevoEquipo);
                    System.out.println("Equipo creado exitosamente.");
                    break;
                }
                case "2": {
                    // Agregar alumno a equipo
                    if (proyecto.getEquipos().isEmpty() || alumnos.isEmpty()) {
                        System.out.println("No hay equipos o alumnos registrados.");
                        break;
                    }

                    System.out.println("Seleccione el equipo:");
                    List<Equipo> equipos = proyecto.getEquipos();
                    for (int i = 0; i < equipos.size(); i++) {
                        System.out.println((i + 1) + ". " + equipos.get(i).getNombre());
                    }
                    System.out.print("Ingrese el número del equipo: ");
                    try {
                        int equipoIndex = Integer.parseInt(sc.nextLine()) - 1;
                        if (equipoIndex >= 0 && equipoIndex < equipos.size()) {
                            Equipo equipoSeleccionado = equipos.get(equipoIndex);

                            System.out.println("Seleccione el alumno:");
                            for (int i = 0; i < alumnos.size(); i++) {
                                System.out.println((i + 1) + ". " + alumnos.get(i).getNombre());
                            }
                            System.out.print("Ingrese el número del alumno: ");
                            try {
                                int alumnoIndex = Integer.parseInt(sc.nextLine()) - 1;
                                if (alumnoIndex >= 0 && alumnoIndex < alumnos.size()) {
                                    Alumno alumnoSeleccionado = alumnos.get(alumnoIndex);
                                    System.out.print("Ingrese el rol del alumno en el equipo: ");
                                    String rol = sc.nextLine();
                                    Profesor profesorTemporal = new Profesor("ProfesorTemporal", "correoTemporal"); // Crear un profesor temporal
                                    profesorTemporal.agregarAlumnoAEquipo(equipoSeleccionado, alumnoSeleccionado, rol);
                                } else {
                                    System.out.println("Número de alumno inválido.");
                                }
                            } catch (NumberFormatException e) {
                                System.out.println("Entrada inválida. Ingrese un número.");
                            }

                        } else {
                            System.out.println("Número de equipo inválido.");
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Entrada inválida. Ingrese un número.");
                    }
                    break;
                }
                case "3": {
                    // Quitar alumno de equipo
                    if (proyecto.getEquipos().isEmpty()) {
                        System.out.println("No hay equipos creados aún.");
                        break;
                    }

                    System.out.println("Seleccione el equipo:");
                    List<Equipo> equipos = proyecto.getEquipos();
                    for (int i = 0; i < equipos.size(); i++) {
                        System.out.println((i + 1) + ". " + equipos.get(i).getNombre());
                    }
                    System.out.print("Ingrese el número del equipo: ");
                    try {
                        int equipoIndex = Integer.parseInt(sc.nextLine()) - 1;
                        if (equipoIndex >= 0 && equipoIndex < equipos.size()) {
                            Equipo equipoSeleccionado = equipos.get(equipoIndex);

                            System.out.print("Ingrese el ID del alumno a eliminar: ");
                            try {
                                int idAlumno = Integer.parseInt(sc.nextLine());
                                Profesor profesorTemporal = new Profesor("ProfesorTemporal", "correoTemporal"); // Crear un profesor temporal
                                profesorTemporal.quitarAlumnoDeEquipo(equipoSeleccionado, idAlumno);
                            } catch (NumberFormatException e) {
                                System.out.println("ID inválido. Debe ser un número entero.");
                            }

                        } else {
                            System.out.println("Número de equipo inválido.");
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Entrada inválida. Ingrese un número.");
                    }
                    break;
                }
                case "4": {
                    // Mostrar Equipos
                    proyecto.mostrarEquipos();
                    break;
                }
                case "5": {
                    // Volver al menú principal
                    return;
                }
                default:
                    System.out.println("Opción no válida.");
            }
        }
    }

    /**
     * Método para asignar tareas a los alumnos dentro de un proyecto seleccionado.
     * @param proyecto Proyecto al cual se asignarán las tareas.
     * @param alumnos Lista de alumnos disponibles para asignar a las tareas.
     * @param sc Scanner para la entrada del usuario.
     */
    public static void asignarTareas(Proyecto proyecto, List<Alumno> alumnos, Scanner sc) {
        System.out.print("Descripción de la tarea: ");
        String descripcion = sc.nextLine();

        System.out.println("Seleccione el alumno a quien asignar la tarea:");
        for (int i = 0; i < alumnos.size(); i++) {
            System.out.println((i + 1) + ". " + alumnos.get(i).getNombre());
        }
        System.out.print("Ingrese el número del alumno: ");
        try {
            int alumnoIndex = Integer.parseInt(sc.nextLine()) - 1;
            if (alumnoIndex >= 0 && alumnoIndex < alumnos.size()) {
                Alumno alumnoSeleccionado = alumnos.get(alumnoIndex);
                Tarea nuevaTarea = new Tarea(descripcion, alumnoSeleccionado);
                proyecto.agregarTarea(nuevaTarea);
                System.out.println("Tarea asignada exitosamente.");
            } else {
                System.out.println("Número de alumno inválido.");
            }
        } catch (NumberFormatException e) {
            System.out.println("Entrada inválida. Ingrese un número.");
        }
    }
}
